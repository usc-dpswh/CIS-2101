1)  Suppose that we have a two SETS A and B implemented using Linked List.
    We perform the SET function intersection in a sorted set and place these
    new elements inside an ARRAY. We then return the intersection between the
    sorted SETS A and B which is the aforementioned ARRAY. So, in main(), we
    have two SETS A and B declared which are pointers to a SET datatype AND 
    we have a SET_ARRAY datatype which will catch the returned value from the
    intersection sorted function.

2)  Perform a Cursor-Based Implementation of a STACK. Suppose that our STACK is
    now populated with elements (int/char), create a function where in each
    consecutive pop(), we are transporting them into our hashtable with respect
    to its element. (e.g. pop() returns 3 from CBI, then put that into our hashtable
    whose hashValue would be 3.) **Note that for our hashtable, we are using Open Hashing.**

3)  Suppose that we have a populated array with elements {1,2,3,4,5,6}. Convert the data
    inside our array to linked list where the elements are sorted in such a way that all
    even numbers switch places with the odd numbers.
    (e.g. SET A[MAX] = {1,2,3,4,5,6} convert to L => 2 => 1 => 4 => 3 => 6 => 5 => NULL)

4)  In a Circular Array Implementation of a QUEUE, perform set difference sorted. The  
    result of that set intersection would be placed inside a dynamically allocated array.
    That dynamically allocated array will be returned THEN translated into BIT VECTOR.
    
            **NOTE that we are comparing SET A and B which are CIRCULAR ARRAYS.
    (e.g.)  SET A = {1,2,5,7}
            SET B = {1,3,4,7}
            **NOTE that C is now an array which is to be returned in main(),
            **then in main, we pass C to another function displaying it in BIT VECTOR
            SET C = {2,5} => 00100100